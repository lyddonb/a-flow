from flow.api import make_request

from flow.core import SWF
from flow.core import check_and_add_kwargs

from flow.faults import StartWorkflowExecutionError

from flow.schema.events import create_event_from_map


def start_workflow_execution(domain, workflow_id, workflow_type_name,
                             workflow_type_version, task_list=None,
                             task_priority=None, _input=None,
                             execution_start_to_close_timeout=None,
                             tag_list=None, child_policy=None,
                             task_start_to_close_timeout=None,
                             lambda_role=None):
    """Starts an execution of the workflow type in the specified domain using
    the provided workflowId and input data.

    This action returns the newly started workflow execution.

    http://boto3.readthedocs.org/en/latest/reference/services/swf.html#SWF.Client.start_workflow_execution

    domain (string) -- [REQUIRED]
    The name of the domain in which the workflow execution is created.

    workflow_id (string) -- [REQUIRED]
    The user defined identifier associated with the workflow execution. You can
    use this to associate a custom identifier with the workflow execution. You
    may specify the same identifier if a workflow execution is logically a
    restart of a previous execution. You cannot have two open workflow
    executions with the same workflowId at the same time.

    workflow_type (dict) -- [REQUIRED]
    The type of the workflow to start.

        ITEMS:
        name (string) -- [REQUIRED]
        Required. The name of the workflow type.

        version (string) -- [REQUIRED]
        Required. The version of the workflow type.

    task_list (dict) --
    The task list to use for the decision tasks generated for this workflow
    execution. This overrides the defaultTaskList specified when registering the
    workflow type.

        ITEMS:
        name (string) -- [REQUIRED]
        The name of the task list.

    task_priority (int) --
    The task priority to use for this workflow execution. This will override any
    default priority that was assigned when the workflow type was registered. If
    not set, then the default task priority for the workflow type will be used.
    Valid values are integers that range from Java's Integer.MIN_VALUE
    (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate
    higher priority.

    _input (string) --
    The input for the workflow execution. This is a free form string which
    should be meaningful to the workflow you are starting. This input is made
    available to the new workflow execution in the WorkflowExecutionStarted
    history event.

    execution_start_to_close_timeout (string) --
    The total duration for this workflow execution. This overrides the
    defaultExecutionStartToCloseTimeout specified when registering the workflow
    type.

    tag_list (list) --
    The list of tags to associate with the workflow execution. You can specify a
    maximum of 5 tags. You can list workflow executions with a specific tag by
    calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and
    specifying a TagFilter .

    task_start_to_close_timeout (string) --
    Specifies the maximum duration of decision tasks for this workflow
    execution. This parameter overrides the defaultTaskStartToCloseTimout
    specified when registering the workflow type using RegisterWorkflowType .

    child_policy (string) --
    If set, specifies the policy to use for the child workflow executions of
    this workflow execution if it is terminated, by calling the
    TerminateWorkflowExecution action explicitly or due to an expired timeout.
    This policy overrides the default child policy specified when registering
    the workflow type using RegisterWorkflowType .

    lambda_role (string) --
    The ARN of an IAM role that authorizes Amazon SWF to invoke AWS Lambda
    functions.

    Returns the run id (string).
    The runId of a workflow execution. This ID is generated by the service and
    can be used to uniquely identify the workflow execution within a domain.

    return run_id (string)
    """
    kwargs = {}

    for aws_prop, value, conversion in (
        ('taskList', task_list, None),
        ('taskPriority', task_priority, str),
        ('input', _input, None),
        ('executionStartToCloseTimeout', execution_start_to_close_timeout,
         None),
        ('tagList', tag_list, None),
        ('taskStartToCloseTimeout', task_start_to_close_timeout, None),
        ('childPolicy', child_policy, None),
        ('lambdaRole', lambda_role, None)):

        kwargs = check_and_add_kwargs(aws_prop, value, conversion, kwargs)

    result = make_request(
        SWF.start_workflow_execution,
        domain=domain,
        workflowId=workflow_id,
        workflowType={
            'name': workflow_type_name,
            'version': workflow_type_version
        },
        **kwargs)

    if result.success:
        return result.result.get('runId')

    return StartWorkflowExecutionError(result.result.message)


def get_workflow_execution_history(domain, workflow_id, run_id,
                                   next_page_token=None,
                                   maximum_page_size=1000,
                                   reverse_order=False):
    """Returns the history of the specified workflow execution. The results may
    be split into multiple pages. To retrieve subsequent pages, make the call
    again using the nextPageToken returned by the initial call.

    ** Note **
        This operation is eventually consistent. The results are best effort and
        may not exactly reflect recent updates and changes.

    domain (string) -- [REQUIRED]
    The name of the domain containing the workflow execution.

    workflow_id (string) -- [REQUIRED]
    The user defined identifier associated with the workflow execution.

    run_id (string) -- [REQUIRED]
    A system-generated unique identifier for the workflow execution.

    next_page_token (string) --
    If a NextPageToken was returned by a previous call, there are more results
    available. To retrieve the next page of results, make the call again using
    the returned token in nextPageToken . Keep all other arguments unchanged.

    The configured maximumPageSize determines how many results can be returned
    in a single call.

    reverse_order (boolean) --
    When set to true , returns the events in reverse order. By default the
    results are returned in ascending order of the eventTimeStamp of the events.

    return dict
    """
    kwargs = {}

    if next_page_token:
        kwargs['nextPageToken'] = next_page_token

    result = make_request(
        SWF.get_workflow_execution_history,
        domain=domain,
        execution={'workflowId': workflow_id, 'runId': run_id},
        maximumPageSize=maximum_page_size,
        reverseOrder=reverse_order,
        **kwargs)

    if result.success:
        return [create_event_from_map(event_map)
                for event_map in result.result.get('events', [])]

    return None


